USE DBMON
GO

CREATE TABLE QUERY_STATS_USAGE
(
SERVER_ID int    NOT NULL   , 
DATABASE_NAME varchar (32)   NOT NULL   , 
OBJECT_ID int    NULL   , 

OBJECT_NAME varchar (255)   NOT NULL   , 
CNT_RATE money    NULL  CONSTRAINT DF__QUERY_STATS_USAGE__CNT_RATE DEFAULT ((0))  , 
CPU_RATE money    NULL  CONSTRAINT DF__QUERY_STATS_USAGE__CPU_RATE DEFAULT ((0))  , 
READ_RATE money    NULL  CONSTRAINT DF__QUERY_STATS_USAGE__READ_RATE DEFAULT ((0))  , 
DURATION_RATE money    NULL  CONSTRAINT DF__QUERY_STATS_USAGE__DRUATION_RATE DEFAULT ((0))  , 
AVG_MIN_CNT bigint    NULL   , 
MIN_MIN_CNT bigint    NULL   , 
MAX_MIN_CNT bigint    NULL   , 
AVG_CPU bigint    NULL   , 
MIN_CPU bigint    NULL   , 
MAX_CPU bigint    NULL   , 
AVG_READ bigint    NULL   , 
MIN_READ bigint    NULL   , 
MAX_READ bigint    NULL   , 
AVG_DURATION bigint    NULL   , 
MAX_DURATION bigint    NULL   , 
MIN_DURATION bigint    NULL   , 
CALL_DAY int    NULL   , 
UNUSED_DAY int    NULL   , 
LAST_CALL_DATE datetime    NOT NULL   , 
UPD_DATE datetime    NOT NULL  CONSTRAINT DF__QUERY_STATS_USAGE__UPD_DATE DEFAULT (getdate()) 
)  ON [PRIMARY]
ALTER TABLE  QUERY_STATS_USAGE ADD CONSTRAINT 
 PK__QUERY_STATS_USAGE__SERVER_ID__DATABASE_NAME__OBJECT_NAME PRIMARY KEY CLUSTERED ([SERVER_ID] ASC, [DATABASE_NAME] ASC , [OBJECT_NAME] ASC  ) ON [PRIMARY] 
go


/*************************************************************************  
* 프로시저명  : dbo.UP_DBMON_COLLECT_QUERYS_STATS_USAGE
* 작성정보    : 2013-02-06
* 관련페이지  : 
* 내용       : SP호출정보 파악을 위해 DBMON => DBADB1.ADMIN으로 수집
* 수정정보    : up_dbmon_collect_querys_stats 160,'2013-07-17 00:00:00.000'
			   2015-02-16 이름 변경, 컬럼 내역 변경
			   2015-03-11 호출 gap이 크지 않으면 DB_MON_QUERY_STATS_V3 에서는 누락되는 SP가 존재 한다. 
			EXEC UP_DBMON_COLLECT_QUERYS_STATS_USAGE 160
**************************************************************************/
CREATE PROCEDURE dbo.UP_DBMON_COLLECT_QUERYS_STATS_USAGE
	 @server_id int
	,@reg_date datetime = null
AS
/* COMMON DECLARE */
SET NOCOUNT ON

/* USER DECLARE */

IF @REG_DATE IS NULL 
	SET @reg_date =  convert(datetime,convert(nvarchar(10), GETDATE()-1, 121))

DECLARE @TO_CPU BIGINT, @TOT_CNT BIGINT, @TOT_READ BIGINT, @TOT_DURATION BIGINT
/* BODY */


TRUNCATE TABLE QUERY_STATS_USAGE


SELECT @TO_CPU =sum(cpu_total) , @TOT_CNT = sum(cnt_min) , @TOT_READ =sum(reads_cnt) , 
	@TOT_DURATION=sum(duration_cnt) 
FROM DB_MON_QUERY_STATS_V3 WITH(NOLOCK) 
WHERE REG_DATE >= @REG_DATE AND REG_DATE < DATEADD(DD,1,@REG_DATE) 



INSERT INTO QUERY_STATS_USAGE 
( UPD_DATE, SERVER_ID, DATABASE_NAME,  OBJECT_ID, OBJECT_NAME,  CNT_RATE, CPU_RATE, READ_RATE, DURATION_RATE, 
	AVG_MIN_CNT, MIN_MIN_CNT, MAX_MIN_CNT, AVG_CPU, MIN_CPU, MAX_CPU, 
	AVG_READ, MIN_READ,MAX_READ, AVG_DURATION, MAX_DURATION, MIN_DURATION, LAST_CALL_DATE
 ) 
SELECT @REG_DATE AS REG_DATE, @SERVER_ID AS SERVER_ID, D.DB_NAME, MAX(D.OBJECT_ID) AS OBJECT_ID, D.OBJECT_NAME, 
	 CONVERT(MONEY, (sum(D.cnt_min) * 1.0 / @TOT_CNT ), 2)    *  100 AS CNT_RATE, 
	 CONVERT(MONEY, (sum(D.cpu_total) * 1.0 / @TO_CPU ), 2)    *  100 AS CPU_RATE, 
	 CONVERT(MONEY, (sum(D.reads_cnt) * 1.0 / @TOT_READ ), 2)    *  100 AS READ_RATE, 
	 CONVERT(MONEY, (sum(D.duration_cnt) * 1.0 / @TOT_DURATION ), 2)    *  100 AS DURATION_RATE, 
	 AVG(D.cnt_min) AS AVG_MIN_CNT, MIN(D.cnt_min) AS MIN_MIN_CNT, MAX(D.cnt_min) AS MAX_MIN_CNT,
	 AVG(D.cpu_cnt) AS AVG_CPU, MIN(D.cpu_cnt) AS MIN_CPU, MAX(D.cpu_cnt) AS MAX_CPU, 
	AVG(D.READS_CNT) AS AVG_READ, MIN(D.READS_CNT) AS MIN_READ, MAX(D.READS_CNT) AS MAX_READ,
	 AVG(D.DURATION_CNT) AS AVG_DURATION, MIN(D.DURATION_CNT) AS MIN_DURATION, MAX(D.DURATION_CNT) AS MAX_DURATION, 
	 MAX(REG_DATE) AS LAST_CALL_DATE
FROM DB_MON_QUERY_STATS_V3 AS D WITH(NOLOCK) 
WHERE REG_DATE >= @REG_DATE AND REG_DATE < DATEADD(DD,1,@REG_DATE)
	AND D.OBJECT_NAME != ''
 --	AND D.OBJECT_NAME = 'up_cstool_get_customercenterlist_sub_proc_dt'
GROUP BY D.DB_NAME, D.OBJECT_NAME
ORDER BY 6 desc



SELECT @TO_CPU =sum(cpu_min) , @TOT_CNT = sum(cnt_min) , @TOT_READ =sum(reads_cnt) , 
	@TOT_DURATION=sum(duration_cnt) 
FROM DB_MON_PROCEDURE_STATS WITH(NOLOCK) 
WHERE REG_DATE >= @REG_DATE AND REG_DATE < DATEADD(DD,1,@REG_DATE) 



INSERT INTO QUERY_STATS_USAGE 
( UPD_DATE, SERVER_ID, DATABASE_NAME,  OBJECT_ID,  OBJECT_NAME,  
	CNT_RATE, CPU_RATE, READ_RATE, DURATION_RATE, 
	AVG_MIN_CNT, MIN_MIN_CNT, MAX_MIN_CNT, AVG_CPU, MIN_CPU, MAX_CPU, 
	AVG_READ, MIN_READ,MAX_READ, AVG_DURATION, MIN_DURATION, MAX_DURATION, LAST_CALL_DATE
 ) 
SELECT  @REG_DATE AS REG_DATE, @SERVER_ID AS SERVER_ID, isnull(D.DB_NAME, 'master') as db_name, MAX(D.OBJECT_ID) AS OBJECT_ID, D.OBJECT_NAME, 
	 CONVERT(MONEY, (sum(D.cnt_min) * 1.0 / @TOT_CNT ), 2)    *  100 AS CNT_RATE, 
	 CONVERT(MONEY, (sum(D.cpu_min) * 1.0 / @TO_CPU ), 2)    *  100 AS CPU_RATE, 
	 CONVERT(MONEY, (sum(D.reads_cnt) * 1.0 / @TOT_READ ), 2)    *  100 AS READ_RATE, 
	 CONVERT(MONEY, (sum(D.duration_cnt) * 1.0 / @TOT_DURATION ), 2)    *  100 AS DURATION_RATE, 
	 AVG(D.cnt_min) AS AVG_MIN_CNT, MIN(D.cnt_min) AS MIN_MIN_CNT, MAX(D.cnt_min) AS MAX_MIN_CNT,
	 AVG(D.cpu_cnt) AS AVG_CPU, MIN(D.cpu_cnt) AS MIN_CPU, MAX(D.cpu_cnt) AS MAX_CPU, 
	 AVG(D.READS_CNT) AS AVG_READ, MIN(D.READS_CNT) AS MIN_READ, MAX(D.READS_CNT) AS MAX_READ,
	 AVG(D.DURATION_CNT) AS AVG_DURATION, MIN(D.DURATION_CNT) AS MIN_DURATION, MAX(D.DURATION_CNT) AS MAX_DURATION, 
	 MAX(REG_DATE) AS LAST_CALL_DATE
FROM DB_MON_PROCEDURE_STATS AS D WITH(NOLOCK)
	LEFT HASH JOIN QUERY_STATS_USAGE AS Q WITH(NOLOCK) ON D.db_name = Q.DATABASE_NAME  AND D.OBJECT_NAME = Q.OBJECT_NAME
WHERE REG_DATE >= @REG_DATE AND REG_DATE < DATEADD(DD,1,@REG_DATE)
	AND Q.OBJECT_NAME IS NULL
	
--AND OBJECT_NAME = 'UPGMKT_Discount_OrderCostInfo_UpdateByCustNo'
GROUP BY D.DB_NAME, D.OBJECT_NAME
ORDER BY 6 desc


UPDATE D 
	SET CNT_RATE =CONVERT(MONEY, (D.AVG_MIN_CNT * 1.0 / T.total_cnt ), 2)    *  100 , 
	 CPU_RATE =CONVERT(MONEY, (D.AVG_CPU * 1.0 / T.TOTAL_CPU) , 2)    *  100 , 
	 READ_RATE =  CONVERT(MONEY, (D.AVG_READ * 1.0 / T.total_reads ), 2)    *  100, 
	 DURATION_RATE = CONVERT(MONEY, (D.AVG_DURATION * 1.0 / T.total_duration ), 2)    *  100
FROM QUERY_STATS_USAGE  AS D 
 CROSS JOIN 
	 ( 
		SELECT sum(AVG_CPU) AS TOTAL_CPU, sum(AVG_MIN_CNT) as total_cnt , sum(AVG_READ) as total_reads, 
		sum(AVG_DURATION) as total_duration
		FROM QUERY_STATS_USAGE WITH(NOLOCK)
	 )  AS T


SELECT * FROM QUERY_STATS_USAGE WITH(NOLOCK) 
GO


USE DBA
GO

create table query_stats_usage
( 
script_seq bigint    not null   , 
server_id int    not null   , 
database_name varchar (32)   not null   , 
object_id int    null   , 
schema_name sysname    not null   , 
object_name varchar (255)   not null   , 
cnt_rate money    null  constraint df__query_stats_usage__cnt_rate default ((0))  , 
cpu_rate money    null  constraint df__query_stats_usage__cpu_rate default ((0))  , 
read_rate money    null  constraint df__query_stats_usage__read_rate default ((0))  , 
druation_rate money    null  constraint df__query_stats_usage__druation_rate default ((0))  , 
avg_min_cnt bigint    null   , 
min_min_cnt bigint    null   , 
max_min_cnt bigint    null   , 
avg_cpu bigint    null   , 
min_cpu bigint    null   , 
max_cpu bigint    null   , 
avg_read bigint    null   , 
min_read bigint    null   , 
max_read bigint    null   , 
avg_duration bigint    null   , 
max_duration bigint    null   , 
min_duration bigint    null   , 
call_day int    null   , 
unused_day int    null   , 
first_call_date datetime    not null   , 
last_call_date datetime    not null   , 
upd_date datetime    not null  constraint df__query_stats_usage__upd_date default (getdate()) 
)  on [primary]
go
create clustered index cidx__query_stats_usage__server_id__database_name__object_name on query_stats_usage ([server_id] asc, [database_name] asc , [object_name] asc  ) on [primary] 
go
create nonclustered index idx__query_stats_usage__object_name on query_stats_usage ([object_name] asc ) on [primary] 
go
alter table query_stats_usage add constraint pk__query_stats_usage__script_no primary key nonclustered ([script_seq] asc ) on [primary] 
go




CREATE TABLE QUERY_STATS_USAGE_WORK
( 
SCRIPT_SEQ BIGINT    NULL   , 
SERVER_ID INT    NOT NULL   , 
DATABASE_NAME VARCHAR (32)   NOT NULL   , 
OBJECT_ID INT    NULL   , 
SCHEMA_NAME SYSNAME    NULL   , 
OBJECT_NAME VARCHAR (255)   NOT NULL   , 
CNT_RATE MONEY    NULL   , 
CPU_RATE MONEY    NULL   , 
READ_RATE MONEY    NULL   , 
DRUATION_RATE MONEY    NULL   , 
AVG_MIN_CNT BIGINT    NULL   , 
MIN_MIN_CNT BIGINT    NULL   , 
MAX_MIN_CNT BIGINT    NULL   , 
AVG_CPU BIGINT    NULL   , 
MIN_CPU BIGINT    NULL   , 
MAX_CPU BIGINT    NULL   , 
AVG_READ BIGINT    NULL   , 
MIN_READ BIGINT    NULL   , 
MAX_READ BIGINT    NULL   , 
AVG_DURATION BIGINT    NULL   , 
MAX_DURATION BIGINT    NULL   , 
MIN_DURATION BIGINT    NULL   , 
CALL_DAY INT    NULL   , 
UNUSED_DAY INT    NULL   , 
FIRST_CALL_DATE DATETIME    NULL   , 
LAST_CALL_DATE DATETIME    NOT NULL   , 
UPD_DATE DATETIME    NOT NULL  
)  ON [PRIMARY]
GO
CREATE CLUSTERED INDEX CIDX__QUERY_STATS_USAGE_WORK__SERVER_ID__DATABASE_NAME__OBJECT_NAME ON QUERY_STATS_USAGE_WORK ([SERVER_ID] ASC, [DATABASE_NAME] ASC , [OBJECT_NAME] ASC  ) ON [PRIMARY] 
GO
CREATE NONCLUSTERED INDEX IDX__QUERY_STATS_USAGE_WORK__OBJECT_NAME ON QUERY_STATS_USAGE_WORK ([OBJECT_NAME] ASC ) ON [PRIMARY] 
GO



-- DBMON QUERY_STATS_USAGE -> DBA.QUERY_STATS_USAGE_WORK 테이블로 이관 한 후 해당 SP 실행 
-- JOB으로 이 모든걸 실행 하면 됩니다.

/* 2015-02-17 BY CHOI BO RA   호출 수 UPDATE  */
CREATE PROCEDURE [dbo].[up_dba_query_stats_usage]    
     @server_id      int, 
	 @execute_date	datetime
AS   

SET NOCOUNT ON 
DECLARE @REG_DATE DATETIME 
SET @REG_DATE = CONVERT(DATE, GETDATE()-1)
--1. script_no 값 가져오기 
--prepare sp 주석이 잘 못 생성되는 경우도 있어서 적용  BACKEND. 소유자 붙어 있는 경우 처리
UPDATE QUERY_STATS_USAGE_WORK 
	SET OBJECT_NAME = RTRIM(LTRIM(SUBSTRING (OBJECT_NAME, CHARINDEX('.', OBJECT_NAME) + 1,  LEN(OBJECT_NAME) - CHARINDEX('.', OBJECT_NAME) + 1 ) ) )


UPDATE W 
	SET SCRIPT_SEQ = S.SCRIPT_SEQ, 
		SCHEMA_NAME = S.SCHEMA_NAME, 
		OBJECT_ID = S.OBJECT_ID -- OBJECT_ID 변경 될 수 있음
		--DATABASE_NAME =  S.DATABASE_NAME
--select  S.SCRIPT_SEQ, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, S.SCHEMA_NAME, W.OBJECT_NAME, 
--		W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
--		W.AVG_CNT, W.MIN_CNT, W.MAX_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, 
--		W.AVG_DURATION, W.MIN_DURATION, W.MAX_DURATION, 
--		W.LAST_CALL_DATE, W.UPD_DATE
from  QUERY_STATS_USAGE_WORK AS W WITH(NOLOCK)
	LEFT JOIN DBA_SCRIPT_ARCHIVE_DATA AS S WITH(NOLOCK) ON W.SERVER_ID =  S.SERVER_ID AND W.DATABASE_NAME = S.DATABASE_NAME 
	AND W.object_name = S.object_name
WHERE W.OBJECT_NAME != ''   
	AND W.DATABASE_NAME  != 'PREPARE'

UPDATE W 
	SET SCRIPT_SEQ = S.SCRIPT_SEQ, 
		SCHEMA_NAME = S.SCHEMA_NAME, 
		OBJECT_ID = S.OBJECT_ID, -- OBJECT_ID 변경 될 수 있음
		DATABASE_NAME =  S.DATABASE_NAME
--select  S.SCRIPT_SEQ, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, S.SCHEMA_NAME, W.OBJECT_NAME, 
--		W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
--		W.AVG_CNT, W.MIN_CNT, W.MAX_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, 
--		W.AVG_DURATION, W.MIN_DURATION, W.MAX_DURATION, 
--		W.LAST_CALL_DATE, W.UPD_DATE
from  QUERY_STATS_USAGE_WORK AS W WITH(NOLOCK)
	LEFT JOIN DBA_SCRIPT_ARCHIVE_DATA AS S WITH(NOLOCK) ON W.SERVER_ID =  S.SERVER_ID 
	AND W.object_name = S.object_name
WHERE W.OBJECT_NAME != ''
	AND W.DATABASE_NAME  ='PREPARE'

-- 1-1 DROP_DT 프로시저 제거 하기 
DELETE W
--select  S.DROP_DT, S.SCRIPT_SEQ, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, S.SCHEMA_NAME, W.OBJECT_NAME, 
--		W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
--		W.AVG_CNT, W.MIN_CNT, W.MAX_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, 
--		W.AVG_DURATION, W.MIN_DURATION, W.MAX_DURATION, 
--		W.LAST_CALL_DATE, W.UPD_DATE
from  QUERY_STATS_USAGE_WORK AS W WITH(NOLOCK)
	 JOIN DBA_SCRIPT_ARCHIVE_DATA AS S WITH(NOLOCK) ON W.SERVER_ID =  S.SERVER_ID AND W.DATABASE_NAME = S.DATABASE_NAME 
	AND W.object_name = S.object_name
WHERE S.DROP_DT IS NOT NULL
	

	
--2.CALL DAY 처리 호출이 있는 건.
UPDATE M 
	SET CALL_DAY = M.CALL_DAY + 1, 
		UNUSED_DAY = 0 , 
		LAST_CALL_DATE = W.LAST_CALL_DATE, 
		UPD_DATE = GETDATE(), 
		CNT_RATE = W.CNT_RATE, CPU_RATE = W.CPU_RATE, READ_RATE = W.READ_RATE, DRUATION_RATE = W.DRUATION_RATE, 
		AVG_MIN_CNT= W.AVG_MIN_CNT, MIN_MIN_CNT= W.MIN_MIN_CNT,  AVG_CPU = W.AVG_CPU, MIN_CPU=W.MIN_CPU, MAX_CPU =W.MAX_CPU,
		AVG_READ = W.AVG_READ, MIN_READ = W.MIN_READ, MAX_READ = W.MAX_READ, AVG_DURATION = W.AVG_DURATION, MAX_DURATION  = W.MAX_DURATION, MIN_DURATION = W.MIN_DURATION
--SELECT 
--	--W.SCRIPT_SEQ, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, W.SCHEMA_NAME, W.OBJECT_NAME, 
--	W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
--	W.AVG_MIN_CNT, W.MIN_MIN_CNT, W.MAX_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, W.AVG_DURATION, W.MAX_DURATION, W.MIN_DURATION, 
--	M.CALL_DAY + 1, 0 AS  UNUSED_DAY, W.LAST_CALL_DATE, W.UPD_DATE
from  QUERY_STATS_USAGE_WORK AS W WITH(NOLOCK)
 JOIN QUERY_STATS_USAGE AS  M WITH(NOLOCK) ON W.SERVER_ID = M.SERVER_ID AND W.DATABASE_NAME = M.DATABASE_NAME AND W.OBJECT_ID = M.OBJECT_ID



--3.UNSED DAY 처리
UPDATE M 
	SET CALL_DAY = 0, 
		UNUSED_DAY = M.UNUSED_DAY + 1 , 
		UPD_DATE = GETDATE()
		-- 다른 정보는 마지막 정보로 내버려 둔다.
--SELECT 
	--M.SCRIPT_SEQ,M.SERVER_ID, M.DATABASE_NAME, M.OBJECT_ID,m.object_name,
	--W.SCRIPT_NO, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, W.SCHEMA_NAME, w.OBJECT_NAME, W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
	--W.AVG_MIN_CNT, W.MIN_MIN_CNT, W.MAX_MIN_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, W.AVG_DURATION, W.MAX_DURATION, W.MIN_DURATION, 
	--0 AS CALL_DAY, M.UNUSED_DAY + 1, W.UPD_DATE

from  QUERY_STATS_USAGE AS m WITH(NOLOCK)
 LEFT JOIN QUERY_STATS_USAGE_WORK AS  W WITH(NOLOCK) ON W.SERVER_ID = M.SERVER_ID AND W.DATABASE_NAME = M.DATABASE_NAME AND W.OBJECT_ID = M.OBJECT_ID
WHERE W.OBJECT_ID IS NULL
	AND M.SERVER_ID = @SERVER_ID



--4.신규 등록 
INSERT INTO QUERY_STATS_USAGE
(
	SCRIPT_SEQ, SERVER_ID, DATABASE_NAME, OBJECT_ID, SCHEMA_NAME, OBJECT_NAME, CNT_RATE, CPU_RATE, READ_RATE, DRUATION_RATE, 
	AVG_MIN_CNT, MIN_MIN_CNT, MAX_MIN_CNT, AVG_CPU, MIN_CPU, MAX_CPU, AVG_READ, MIN_READ, MAX_READ, AVG_DURATION, MAX_DURATION, MIN_DURATION, 
	CALL_DAY, UNUSED_DAY, FIRST_CALL_DATE, LAST_CALL_DATE, UPD_DATE
)
SELECT 
	W.SCRIPT_SEQ, W.SERVER_ID, W.DATABASE_NAME, W.OBJECT_ID, W.SCHEMA_NAME, W.OBJECT_NAME, W.CNT_RATE, W.CPU_RATE, W.READ_RATE, W.DRUATION_RATE, 
	W.AVG_MIN_CNT, W.MIN_MIN_CNT, W.MAX_MIN_CNT, W.AVG_CPU, W.MIN_CPU, W.MAX_CPU, W.AVG_READ, W.MIN_READ, W.MAX_READ, W.AVG_DURATION, W.MAX_DURATION, W.MIN_DURATION, 
	1 AS CALL_DAY, 0 AS  UNUSED_DAY, W.LAST_CALL_DATE AS FIRST_CALL_DATE, W.LAST_CALL_DATE, W.UPD_DATE

from  QUERY_STATS_USAGE_WORK AS W WITH(NOLOCK)
 LEFT JOIN QUERY_STATS_USAGE AS  M WITH(NOLOCK) ON W.SERVER_ID = M.SERVER_ID AND W.DATABASE_NAME = M.DATABASE_NAME AND W.OBJECT_ID = M.OBJECT_ID
WHERE M.OBJECT_ID IS NULL  AND W.SCRIPT_SEQ IS NOT NULL


--5. 삭제 처리 
DELETE M
FROM QUERY_STATS_USAGE AS M WITH(NOLOCK)
	JOIN DBA_SCRIPT_ARCHIVE_DATA AS S WITH(NOLOCK) ON M.SCRIPT_SEQ = S.SCRIPT_SEQ
WHERE  S.DROP_DT < DATEADD(DD,1,@REG_DATE)


-- 6.로그 입력 
IF EXISTS(SELECT * FROM QUERY_STATS_USAGE_LOG WITH(NOLOCK) WHERE SERVER_ID = @SERVER_ID )
	UPDATE QUERY_STATS_USAGE_LOG  SET EXECUTE_DATE = @execute_date where server_id = @server_id
ELSE 
	INSERT INTO QUERY_STATS_USAGE_LOG ( SERVER_ID, EXECUTE_DATE ) 
	VALUES ( @SERVER_ID, @execute_date) 





